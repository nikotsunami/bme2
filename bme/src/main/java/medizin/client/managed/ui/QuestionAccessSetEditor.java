// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.

package medizin.client.managed.ui;

import com.google.gwt.core.client.GWT;
import com.google.gwt.editor.client.Editor;
import com.google.gwt.editor.client.Editor.Ignore;
import com.google.gwt.editor.client.EditorDelegate;
import com.google.gwt.editor.client.LeafValueEditor;
import com.google.gwt.editor.client.ValueAwareEditor;
import com.google.gwt.editor.client.adapters.EditorSource;
import com.google.gwt.editor.client.adapters.ListEditor;
import com.google.gwt.event.dom.client.ClickEvent;
import com.google.gwt.event.shared.EventBus;
import com.google.gwt.event.shared.HandlerRegistration;
import com.google.gwt.resources.client.CssResource;
import com.google.gwt.uibinder.client.UiBinder;
import com.google.gwt.uibinder.client.UiField;
import com.google.gwt.uibinder.client.UiHandler;
import com.google.gwt.user.client.ui.Button;
import com.google.gwt.user.client.ui.Composite;
import com.google.gwt.user.client.ui.FlowPanel;
import com.google.gwt.user.client.ui.HTMLPanel;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.ValueListBox;
import com.google.gwt.user.client.ui.Widget;
import com.google.web.bindery.requestfactory.gwt.client.RequestFactoryEditorDriver;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import medizin.client.managed.request.PersonProxy;
import medizin.client.managed.request.QuestionAccessProxy;
import medizin.client.managed.request.QuestionEventProxy;
import medizin.client.managed.request.QuestionProxy;
import medizin.client.managed.ui.QuestionAccessSetEditor.Style;
import medizin.client.scaffold.place.CollectionRenderer;
import medizin.client.shared.AccessRights;

public class QuestionAccessSetEditor extends QuestionAccessSetEditor_Roo_Gwt {

//    @UiField
//    FlowPanel container;
//
//    @UiField(provided = true)
//    @Ignore
//    ValueListBox<QuestionAccessProxy> picker = new ValueListBox<QuestionAccessProxy>(medizin.client.managed.ui.QuestionAccessProxyRenderer.instance(), new com.google.gwt.requestfactory.ui.client.EntityProxyKeyProvider<QuestionAccessProxy>());
//
//    @UiField
//    Button add;
//
//    @UiField
//    HTMLPanel editorPanel;
//
//    @UiField
//    Button clickToEdit;
//
//    @UiField
//    HTMLPanel viewPanel;
//
//    @UiField
//    Label viewLabel;
//
//    @UiField
//    Style style;

    boolean editing = false;

    private Set<QuestionAccessProxy> values;

//    private final List<QuestionAccessProxy> displayedList;

    public QuestionAccessSetEditor() {
//        initWidget(GWT.<Binder>create(Binder.class).createAndBindUi(this));
//        Driver driver = GWT.<Driver>create(Driver.class);
//        ListEditor<QuestionAccessProxy, NameLabel> editor = ListEditor.of(new NameLabelSource());
//        ListEditor<QuestionAccessProxy, NameLabel> listEditor = editor;
//        driver.initialize(listEditor);
//        driver.display(new ArrayList<QuestionAccessProxy>());
//        displayedList = listEditor.getList();
//        editing = false;
    }

//    @UiHandler("add")
//    public void addClicked(ClickEvent e) {
////        if (!displayedList.contains(picker.getValue())) {
////            displayedList.add(picker.getValue());
////            viewLabel.setText(makeFlatList(displayedList));
////        }
//    }
//
//    @UiHandler("clickToEdit")
//    public void clickToEditClicked(ClickEvent e) {
//        toggleEditorMode();
//    }

    @Override
    public void flush() {
    }

    @Override
    public Set<medizin.client.managed.request.QuestionAccessProxy> getValue() {
//        if (values == null && displayedList.size() == 0) {
//            return null;
//        }
//        return new HashSet<QuestionAccessProxy>(displayedList);
    	return null;
    }

    public void onLoad() {
        makeEditable(false);
    }

    @Override
    public void onPropertyChange(String... strings) {
    }

    public void setAcceptableValues(Collection<QuestionAccessProxy> proxies) {
//        picker.setAcceptableValues(proxies);
    }

    @Override
    public void setDelegate(EditorDelegate<Set<QuestionAccessProxy>> editorDelegate) {
    }

    @Override
    public void setValue(Set<QuestionAccessProxy> values) {
        this.values = values;
        makeEditable(editing = false);
//        if (displayedList != null) {
//            displayedList.clear();
//        }
//        if (values != null) {
//            for (QuestionAccessProxy e : values) {
//                displayedList.add(e);
//            }
//        }
//        viewLabel.setText(makeFlatList(values));
    }

    private void makeEditable(boolean editable) {
//        if (editable) {
//            editorPanel.setStylePrimaryName(style.editorPanelVisible());
//            viewPanel.setStylePrimaryName(style.viewPanelHidden());
//            clickToEdit.setText("Done");
//        } else {
//            editorPanel.setStylePrimaryName(style.editorPanelHidden());
//            viewPanel.setStylePrimaryName(style.viewPanelVisible());
//            clickToEdit.setText("Edit");
//        }
    }

    private String makeFlatList(Collection<QuestionAccessProxy> values) {
        return CollectionRenderer.of(medizin.client.managed.ui.QuestionAccessProxyRenderer.instance()).render(values);
    }

    private void toggleEditorMode() {
        editing = !editing;
        makeEditable(editing);
    }

    interface Binder extends UiBinder<Widget, QuestionAccessSetEditor> {
    }

    interface Driver extends RequestFactoryEditorDriver<List<QuestionAccessProxy>, ListEditor<QuestionAccessProxy, NameLabel>> {
    }

    class NameLabel extends Composite implements ValueAwareEditor<QuestionAccessProxy> {

        final Label idEditor = new Label();

        public NameLabel() {
            this(null);
        }

        public NameLabel(EventBus eventBus) {
            initWidget(idEditor);
        }

        public void flush() {
        }

        @Override
        public void onPropertyChange(String... strings) {
        }

        @Override
        public void setDelegate(EditorDelegate<QuestionAccessProxy> editorDelegate) {
        }

        @Override
        public void setValue(QuestionAccessProxy proxy) {
        }
    }

    interface Style extends CssResource {

        String editorPanelHidden();

        String editorPanelVisible();

        String viewPanelHidden();

        String viewPanelVisible();
    }

    private class NameLabelSource extends EditorSource<NameLabel> {

        @Override
        public NameLabel create(int index) {
            NameLabel label = new NameLabel();
//            container.insert(label, index);
            return label;
        }

        @Override
        public void dispose(NameLabel subEditor) {
            subEditor.removeFromParent();
        }

        @Override
        public void setIndex(NameLabel editor, int index) {
//            container.insert(editor, index);
        }
    }
}
