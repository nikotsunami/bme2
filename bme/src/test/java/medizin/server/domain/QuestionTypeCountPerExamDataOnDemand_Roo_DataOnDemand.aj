// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package medizin.server.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import medizin.server.domain.Assesment;
import medizin.server.domain.AssesmentDataOnDemand;
import medizin.server.domain.QuestionTypeCountPerExam;
import medizin.server.domain.QuestionTypeCountPerExamDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect QuestionTypeCountPerExamDataOnDemand_Roo_DataOnDemand {
    
    declare @type: QuestionTypeCountPerExamDataOnDemand: @Component;
    
    private Random QuestionTypeCountPerExamDataOnDemand.rnd = new SecureRandom();
    
    private List<QuestionTypeCountPerExam> QuestionTypeCountPerExamDataOnDemand.data;
    
    @Autowired
    private AssesmentDataOnDemand QuestionTypeCountPerExamDataOnDemand.assesmentDataOnDemand;
    
    public QuestionTypeCountPerExam QuestionTypeCountPerExamDataOnDemand.getNewTransientQuestionTypeCountPerExam(int index) {
        QuestionTypeCountPerExam obj = new QuestionTypeCountPerExam();
        setAssesment(obj, index);
        setQuestionTypeCount(obj, index);
        setSort_order(obj, index);
        return obj;
    }
    
    public void QuestionTypeCountPerExamDataOnDemand.setAssesment(QuestionTypeCountPerExam obj, int index) {
        Assesment assesment = assesmentDataOnDemand.getRandomAssesment();
        obj.setAssesment(assesment);
    }
    
    public void QuestionTypeCountPerExamDataOnDemand.setQuestionTypeCount(QuestionTypeCountPerExam obj, int index) {
        Integer questionTypeCount = new Integer(index);
        obj.setQuestionTypeCount(questionTypeCount);
    }
    
    public void QuestionTypeCountPerExamDataOnDemand.setSort_order(QuestionTypeCountPerExam obj, int index) {
        Integer sort_order = new Integer(index);
        obj.setSort_order(sort_order);
    }
    
    public QuestionTypeCountPerExam QuestionTypeCountPerExamDataOnDemand.getSpecificQuestionTypeCountPerExam(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        QuestionTypeCountPerExam obj = data.get(index);
        Long id = obj.getId();
        return QuestionTypeCountPerExam.findQuestionTypeCountPerExam(id);
    }
    
    public QuestionTypeCountPerExam QuestionTypeCountPerExamDataOnDemand.getRandomQuestionTypeCountPerExam() {
        init();
        QuestionTypeCountPerExam obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return QuestionTypeCountPerExam.findQuestionTypeCountPerExam(id);
    }
    
    public boolean QuestionTypeCountPerExamDataOnDemand.modifyQuestionTypeCountPerExam(QuestionTypeCountPerExam obj) {
        return false;
    }
    
    public void QuestionTypeCountPerExamDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = QuestionTypeCountPerExam.findQuestionTypeCountPerExamEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'QuestionTypeCountPerExam' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<QuestionTypeCountPerExam>();
        for (int i = 0; i < 10; i++) {
            QuestionTypeCountPerExam obj = getNewTransientQuestionTypeCountPerExam(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
