// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package medizin.server.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import medizin.server.domain.Assesment;
import medizin.server.domain.AssesmentDataOnDemand;
import medizin.server.domain.Mc;
import medizin.server.domain.McDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect AssesmentDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AssesmentDataOnDemand: @Component;
    
    private Random AssesmentDataOnDemand.rnd = new SecureRandom();
    
    private List<Assesment> AssesmentDataOnDemand.data;
    
    @Autowired
    private McDataOnDemand AssesmentDataOnDemand.mcDataOnDemand;
    
    public Assesment AssesmentDataOnDemand.getNewTransientAssesment(int index) {
        Assesment obj = new Assesment();
        setAssesmentVersion(obj, index);
        setDateClosed(obj, index);
        setDateOfAssesment(obj, index);
        setDateOpen(obj, index);
        setIsClosed(obj, index);
        setLogo(obj, index);
        setMc(obj, index);
        setName(obj, index);
        setPercentSameQuestion(obj, index);
        setPlace(obj, index);
        setRepeFor(obj, index);
        return obj;
    }
    
    public void AssesmentDataOnDemand.setAssesmentVersion(Assesment obj, int index) {
        Integer assesmentVersion = new Integer(index);
        obj.setAssesmentVersion(assesmentVersion);
    }
    
    public void AssesmentDataOnDemand.setDateClosed(Assesment obj, int index) {
        Date dateClosed = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateClosed(dateClosed);
    }
    
    public void AssesmentDataOnDemand.setDateOfAssesment(Assesment obj, int index) {
        Date dateOfAssesment = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateOfAssesment(dateOfAssesment);
    }
    
    public void AssesmentDataOnDemand.setDateOpen(Assesment obj, int index) {
        Date dateOpen = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateOpen(dateOpen);
    }
    
    public void AssesmentDataOnDemand.setIsClosed(Assesment obj, int index) {
        Boolean isClosed = Boolean.TRUE;
        obj.setIsClosed(isClosed);
    }
    
    public void AssesmentDataOnDemand.setLogo(Assesment obj, int index) {
        String logo = "logo_" + index;
        if (logo.length() > 255) {
            logo = logo.substring(0, 255);
        }
        obj.setLogo(logo);
    }
    
    public void AssesmentDataOnDemand.setMc(Assesment obj, int index) {
        Mc mc = mcDataOnDemand.getRandomMc();
        obj.setMc(mc);
    }
    
    public void AssesmentDataOnDemand.setName(Assesment obj, int index) {
        String name = "name_" + index;
        if (name.length() > 255) {
            name = name.substring(0, 255);
        }
        obj.setName(name);
    }
    
    public void AssesmentDataOnDemand.setPercentSameQuestion(Assesment obj, int index) {
        Integer percentSameQuestion = new Integer(index);
        obj.setPercentSameQuestion(percentSameQuestion);
    }
    
    public void AssesmentDataOnDemand.setPlace(Assesment obj, int index) {
        String place = "place_" + index;
        if (place.length() > 100) {
            place = place.substring(0, 100);
        }
        obj.setPlace(place);
    }
    
    public void AssesmentDataOnDemand.setRepeFor(Assesment obj, int index) {
        Assesment repeFor = obj;
        obj.setRepeFor(repeFor);
    }
    
    public Assesment AssesmentDataOnDemand.getSpecificAssesment(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Assesment obj = data.get(index);
        Long id = obj.getId();
        return Assesment.findAssesment(id);
    }
    
    public Assesment AssesmentDataOnDemand.getRandomAssesment() {
        init();
        Assesment obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Assesment.findAssesment(id);
    }
    
    public boolean AssesmentDataOnDemand.modifyAssesment(Assesment obj) {
        return false;
    }
    
    public void AssesmentDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Assesment.findAssesmentEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Assesment' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Assesment>();
        for (int i = 0; i < 10; i++) {
            Assesment obj = getNewTransientAssesment(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
