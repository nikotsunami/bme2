// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package medizin.server.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import medizin.server.domain.QuestionType;
import medizin.server.domain.QuestionTypeDataOnDemand;
import org.springframework.stereotype.Component;

privileged aspect QuestionTypeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: QuestionTypeDataOnDemand: @Component;
    
    private Random QuestionTypeDataOnDemand.rnd = new SecureRandom();
    
    private List<QuestionType> QuestionTypeDataOnDemand.data;
    
    public QuestionType QuestionTypeDataOnDemand.getNewTransientQuestionType(int index) {
        QuestionType obj = new QuestionType();
        setFalseAnswers(obj, index);
        setIsWeil(obj, index);
        setMaxLetters(obj, index);
        setQuestionTypeName(obj, index);
        setSumAnswers(obj, index);
        setTrueAnswers(obj, index);
        return obj;
    }
    
    public void QuestionTypeDataOnDemand.setFalseAnswers(QuestionType obj, int index) {
        Integer falseAnswers = new Integer(index);
        if (falseAnswers < 0 || falseAnswers > 99) {
            falseAnswers = 99;
        }
        obj.setFalseAnswers(falseAnswers);
    }
    
    public void QuestionTypeDataOnDemand.setIsWeil(QuestionType obj, int index) {
        Boolean isWeil = Boolean.TRUE;
        obj.setIsWeil(isWeil);
    }
    
    public void QuestionTypeDataOnDemand.setMaxLetters(QuestionType obj, int index) {
        Integer maxLetters = new Integer(index);
        if (maxLetters < 0 || maxLetters > 999) {
            maxLetters = 999;
        }
        obj.setMaxLetters(maxLetters);
    }
    
    public void QuestionTypeDataOnDemand.setQuestionTypeName(QuestionType obj, int index) {
        String questionTypeName = "questionTypeName_" + index;
        if (questionTypeName.length() > 20) {
            questionTypeName = new Random().nextInt(10) + questionTypeName.substring(1, 20);
        }
        obj.setQuestionTypeName(questionTypeName);
    }
    
    public void QuestionTypeDataOnDemand.setSumAnswers(QuestionType obj, int index) {
        Integer sumAnswers = new Integer(index);
        if (sumAnswers < 0 || sumAnswers > 99) {
            sumAnswers = 99;
        }
        obj.setSumAnswers(sumAnswers);
    }
    
    public void QuestionTypeDataOnDemand.setTrueAnswers(QuestionType obj, int index) {
        Integer trueAnswers = new Integer(index);
        if (trueAnswers < 0 || trueAnswers > 99) {
            trueAnswers = 99;
        }
        obj.setTrueAnswers(trueAnswers);
    }
    
    public QuestionType QuestionTypeDataOnDemand.getSpecificQuestionType(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        QuestionType obj = data.get(index);
        Long id = obj.getId();
        return QuestionType.findQuestionType(id);
    }
    
    public QuestionType QuestionTypeDataOnDemand.getRandomQuestionType() {
        init();
        QuestionType obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return QuestionType.findQuestionType(id);
    }
    
    public boolean QuestionTypeDataOnDemand.modifyQuestionType(QuestionType obj) {
        return false;
    }
    
    public void QuestionTypeDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = QuestionType.findQuestionTypeEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'QuestionType' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<QuestionType>();
        for (int i = 0; i < 10; i++) {
            QuestionType obj = getNewTransientQuestionType(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
