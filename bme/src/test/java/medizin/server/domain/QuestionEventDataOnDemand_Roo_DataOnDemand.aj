// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package medizin.server.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import medizin.server.domain.Institution;
import medizin.server.domain.InstitutionDataOnDemand;
import medizin.server.domain.QuestionEvent;
import medizin.server.domain.QuestionEventDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect QuestionEventDataOnDemand_Roo_DataOnDemand {
    
    declare @type: QuestionEventDataOnDemand: @Component;
    
    private Random QuestionEventDataOnDemand.rnd = new SecureRandom();
    
    private List<QuestionEvent> QuestionEventDataOnDemand.data;
    
    @Autowired
    private InstitutionDataOnDemand QuestionEventDataOnDemand.institutionDataOnDemand;
    
    public QuestionEvent QuestionEventDataOnDemand.getNewTransientQuestionEvent(int index) {
        QuestionEvent obj = new QuestionEvent();
        setEventName(obj, index);
        setInstitution(obj, index);
        return obj;
    }
    
    public void QuestionEventDataOnDemand.setEventName(QuestionEvent obj, int index) {
        String eventName = "eventName_" + index;
        if (eventName.length() > 60) {
            eventName = new Random().nextInt(10) + eventName.substring(1, 60);
        }
        obj.setEventName(eventName);
    }
    
    public void QuestionEventDataOnDemand.setInstitution(QuestionEvent obj, int index) {
        Institution institution = institutionDataOnDemand.getRandomInstitution();
        obj.setInstitution(institution);
    }
    
    public QuestionEvent QuestionEventDataOnDemand.getSpecificQuestionEvent(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        QuestionEvent obj = data.get(index);
        Long id = obj.getId();
        return QuestionEvent.findQuestionEvent(id);
    }
    
    public QuestionEvent QuestionEventDataOnDemand.getRandomQuestionEvent() {
        init();
        QuestionEvent obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return QuestionEvent.findQuestionEvent(id);
    }
    
    public boolean QuestionEventDataOnDemand.modifyQuestionEvent(QuestionEvent obj) {
        return false;
    }
    
    public void QuestionEventDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = QuestionEvent.findQuestionEventEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'QuestionEvent' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<QuestionEvent>();
        for (int i = 0; i < 10; i++) {
            QuestionEvent obj = getNewTransientQuestionEvent(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
