// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package medizin.server.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import medizin.server.domain.StaticContent;
import medizin.server.domain.StaticContentDataOnDemand;
import org.springframework.stereotype.Component;

privileged aspect StaticContentDataOnDemand_Roo_DataOnDemand {
    
    declare @type: StaticContentDataOnDemand: @Component;
    
    private Random StaticContentDataOnDemand.rnd = new SecureRandom();
    
    private List<StaticContent> StaticContentDataOnDemand.data;
    
    public StaticContent StaticContentDataOnDemand.getNewTransientStaticContent(int index) {
        StaticContent obj = new StaticContent();
        setStaticText(obj, index);
        return obj;
    }
    
    public void StaticContentDataOnDemand.setStaticText(StaticContent obj, int index) {
        String staticText = "staticText_" + index;
        if (staticText.length() > 9999) {
            staticText = staticText.substring(0, 9999);
        }
        obj.setStaticText(staticText);
    }
    
    public StaticContent StaticContentDataOnDemand.getSpecificStaticContent(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        StaticContent obj = data.get(index);
        Long id = obj.getId();
        return StaticContent.findStaticContent(id);
    }
    
    public StaticContent StaticContentDataOnDemand.getRandomStaticContent() {
        init();
        StaticContent obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return StaticContent.findStaticContent(id);
    }
    
    public boolean StaticContentDataOnDemand.modifyStaticContent(StaticContent obj) {
        return false;
    }
    
    public void StaticContentDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = StaticContent.findStaticContentEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'StaticContent' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<StaticContent>();
        for (int i = 0; i < 10; i++) {
            StaticContent obj = getNewTransientStaticContent(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
