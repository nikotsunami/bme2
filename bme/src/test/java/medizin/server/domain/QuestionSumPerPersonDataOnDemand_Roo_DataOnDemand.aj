// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package medizin.server.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import medizin.server.domain.Assesment;
import medizin.server.domain.AssesmentDataOnDemand;
import medizin.server.domain.Person;
import medizin.server.domain.PersonDataOnDemand;
import medizin.server.domain.QuestionEvent;
import medizin.server.domain.QuestionEventDataOnDemand;
import medizin.server.domain.QuestionSumPerPerson;
import medizin.server.domain.QuestionSumPerPersonDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect QuestionSumPerPersonDataOnDemand_Roo_DataOnDemand {
    
    declare @type: QuestionSumPerPersonDataOnDemand: @Component;
    
    private Random QuestionSumPerPersonDataOnDemand.rnd = new SecureRandom();
    
    private List<QuestionSumPerPerson> QuestionSumPerPersonDataOnDemand.data;
    
    @Autowired
    private AssesmentDataOnDemand QuestionSumPerPersonDataOnDemand.assesmentDataOnDemand;
    
    @Autowired
    private QuestionEventDataOnDemand QuestionSumPerPersonDataOnDemand.questionEventDataOnDemand;
    
    @Autowired
    private PersonDataOnDemand QuestionSumPerPersonDataOnDemand.personDataOnDemand;
    
    public QuestionSumPerPerson QuestionSumPerPersonDataOnDemand.getNewTransientQuestionSumPerPerson(int index) {
        QuestionSumPerPerson obj = new QuestionSumPerPerson();
        setAssesment(obj, index);
        setQuestionEvent(obj, index);
        setQuestionSum(obj, index);
        setResponsiblePerson(obj, index);
        setSort_order(obj, index);
        return obj;
    }
    
    public void QuestionSumPerPersonDataOnDemand.setAssesment(QuestionSumPerPerson obj, int index) {
        Assesment assesment = assesmentDataOnDemand.getRandomAssesment();
        obj.setAssesment(assesment);
    }
    
    public void QuestionSumPerPersonDataOnDemand.setQuestionEvent(QuestionSumPerPerson obj, int index) {
        QuestionEvent questionEvent = questionEventDataOnDemand.getRandomQuestionEvent();
        obj.setQuestionEvent(questionEvent);
    }
    
    public void QuestionSumPerPersonDataOnDemand.setQuestionSum(QuestionSumPerPerson obj, int index) {
        Integer questionSum = new Integer(index);
        obj.setQuestionSum(questionSum);
    }
    
    public void QuestionSumPerPersonDataOnDemand.setResponsiblePerson(QuestionSumPerPerson obj, int index) {
        Person responsiblePerson = personDataOnDemand.getRandomPerson();
        obj.setResponsiblePerson(responsiblePerson);
    }
    
    public void QuestionSumPerPersonDataOnDemand.setSort_order(QuestionSumPerPerson obj, int index) {
        Integer sort_order = new Integer(index);
        obj.setSort_order(sort_order);
    }
    
    public QuestionSumPerPerson QuestionSumPerPersonDataOnDemand.getSpecificQuestionSumPerPerson(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        QuestionSumPerPerson obj = data.get(index);
        Long id = obj.getId();
        return QuestionSumPerPerson.findQuestionSumPerPerson(id);
    }
    
    public QuestionSumPerPerson QuestionSumPerPersonDataOnDemand.getRandomQuestionSumPerPerson() {
        init();
        QuestionSumPerPerson obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return QuestionSumPerPerson.findQuestionSumPerPerson(id);
    }
    
    public boolean QuestionSumPerPersonDataOnDemand.modifyQuestionSumPerPerson(QuestionSumPerPerson obj) {
        return false;
    }
    
    public void QuestionSumPerPersonDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = QuestionSumPerPerson.findQuestionSumPerPersonEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'QuestionSumPerPerson' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<QuestionSumPerPerson>();
        for (int i = 0; i < 10; i++) {
            QuestionSumPerPerson obj = getNewTransientQuestionSumPerPerson(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
